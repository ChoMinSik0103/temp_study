1. 상속의 형태 
  const user = {
    activate : true,
    login : function() {
        console.log('로그인 되었습니다.');
    }
  };

  const student = {
    passion : true
  };

  student.__proto__ = user;

  const greedyStudent = {
    class : 11,
    __proto__ : student
  }

2. 생성자 함수 상속
  const user = {
    activate : true,
    login : function() {
        console.log(`${this.name}님 로그인 되었습니다.`);
    }
  }

  function Student(name) {
    this.name = name;
  }

  // 생성자 함수는 아래와 같이 prototype 라는 함수로 상속한다. 
  Student.prototype = user;


3. __proto__ 이런 형태는 요즘 잘 사용하지 않고 아래와 같이 setPrototypeOf, getPrototypeOf 의 형태로 사용한다. 
  const animal = {
    eats: true
  };

  const rabbit = {
    jumps: true
  };

  Object.setPrototypeOf(rabbit, animal); // rabbit의 부모 설정
  console.log(Object.getPrototypeOf(rabbit)); // 현재 rabbit의 부모 확인

4. 함수에서 객체 상속시 첫번째 방법이 맞으나 2번째 방법도 컴파일 오류가 발생하진 않는다.  
   참조와 같은 구문을 따로 넣어 줘야 함. 객체마다 설정을 해야 함. 
  Student.prototype = user;
  //Student.__proto__ = user;

  cf > 참조 
  'use strict';
  // Student.__proto__를 writable: false로 설정하여 변경 불가능하게 만듦
  Object.defineProperty(Student, '__proto__', {
    writable: false,
    configurable: false
  });


