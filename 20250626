1. 클래스 기반 객체지향 언어(java, c++) / 프로토타입 기반 객체지향 언어(javascript)  차이
  --클래스 기반 객체지향 은 설계도 class 기반으로 객체를 생성 
  --프로토타입 기반 객체지향은 기본 객체를 기반으로 새로운 객체 생성

ex >

>> 클래스 기반 
class Car {
  constructor(color) {
    this.color = color;          // 인스턴스 고유 속성
  }

  drive() {
    console.log(this.color + " 자동차가 운전 중");
  }
}

const myCar = new Car("red");
const yourCar = new Car("blue");

myCar.drive();   // red 자동차가 운전 중
yourCar.drive(); // blue 자동차가 운전 중

class Car 라는 설계도 작성후 new 로 myCar, yourCar 이라는 인스턴스 생성해서 사용
new 로 인스턴스 생성시 color 은 constructor 로 초기화해서 사용

클래스 기반은 constructor 로 인해 color 값이 꼭 초기화 되어야 되므로 프로토타입 기반에 비해 상대적으로 안정적이라 판단됨.


>> 프로토타입 기반 
const car = {
  color: "red",
  drive() {
    console.log(this.color + " 자동차가 운전 중");
  }
};

const myCar = Object.create(car);
myCar.color = "blue";

myCar.drive();  // blue 자동차가 운전 중

car 라는 부모 객체 생성후 그 객체를 기반으로 myCar 이라는 새로운 객체 생성하여 사용
car 이라는 객체로 myCar 이라는 새로운 객체 생성 myCar.color = "blue" 미 지정시 car 객체의 color = "red" 를 따라감.


2. class 기반에서 인스턴스 / 프로토타입 기반 객체의 용어 차이 

3. 프로토타입 체인(prototype chain)
  자바스크립트는 객체에서 속성이나 메서드를 찾을 때 없으면 부모 객체(프로토타입)을 계속 따로 올라가는 구조임
  부모-자식 객체들이 줄줄이 연결된 구조를 프로토타입 체인이라 함. 

>> 예시
const grandParent = {
  greet() { console.log("안녕, 나는 조상!"); }
};

const parent = Object.create(grandParent);
parent.sayHi = function() {
  console.log("안녕, 나는 부모!");
};

const child = Object.create(parent);
child.name = "자식";

console.log(child.name);    // "자식" → 자기 자신에서 찾음
child.sayHi();              // "안녕, 나는 부모!" → 부모(parent)에서 찾음
child.greet();              // "안녕, 나는 조상!" → 조상(grandParent)에서 찾음

메모리 절약의 효과는 있고 상위의 객체나 메서드를 찾을 때 탐색시간의 불이익은 있음.
최악의 경우 O(n) 탐색  --> 프로토타입 캐싱, JIT 컴파일을 통해 최적화
